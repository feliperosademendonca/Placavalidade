<title>Placa de Validade RM / Placa</title>
<div id="tudoPlaca">

  <form id="formPesquisa">
    
    
    <input
      type="number"
      id="inputNumber"
      maxlength="13"
      placeholder="EAN ou Código Interno"
    />
    <input type="date" id="inputDataValidade" />
     
     
      <button type="button" onclick="enviarDados()">Gerar Placa</button>
      <button id="printButton" onclick=" pdf()">Imprimir</button>
      <!--<button onclick="cad()">Cadastro</button>
      <button onclick="sair()">Sair</button>-->
 
    
  </form>

  <table id="tb">
    <tr id="t0"><th id="a0">Info Impressão</th>
      <td id="b0">dataHora</td></tr>
    <tr id="tr1"><th id="a1" colspan="2">info</th></tr>
    <tr><th id="a2">CÓDIGO DO PRODUTO</th> <th id="b1">MÊS/ANO</th></tr>
    <tr><td id="a3">codint</td>
      <td id="b2" rowspan="8">mes</td></tr>
    <tr><th id="a4">CÓDIGO EAN</th></tr>
    <tr><td id="a5">ean</td></tr>
    <tr ><td id="a6"class="libre-barcode-ean13-text-regular">ean</td></tr>
    <tr><th id="a7">DATA DO RECEBIMENTO</th></tr>
    <tr><td id="a8">dataDeRecebimento</td></tr>
    <tr><th id="a9">DATA DE VALIDADE</th></tr>
    <tr><td id="dataValidade">dataValidade</td></tr>
    <tr><th id="a11">DIAS PARA VENCER</th>
      <td id="b3" rowspan="4">ano</td></tr>
    <tr><td id="a12">diasParaVencer</td></tr>
    <tr><th id="a13">CONFERENTE</th></tr>
    <tr><td id="a14">username</td></tr>
  </table>

</div
  <!--Scripts-->
<div>
  <script> 
    // Quando o DOM estiver completamente carregado, executa a função
    document.addEventListener('DOMContentLoaded', () => {
      const token = localStorage.getItem('authToken');

      // Verifica se o token está presente
      if (!token) {
        console.error("Token não encontrado no localStorage");
        alert("Token não encontrado");
         window.location = "/";

        return;  // Interrompe a execução se o token não for encontrado
      }

       
      const inputs = document.querySelectorAll('input');

      inputs.forEach((input, index) => {
        input.addEventListener('keydown', function(event) {
          if (event.key === 'Enter') {
            event.preventDefault(); // Bloqueia o comportamento padrão do Enter
            console.log('Código escaneado:', input.value);

            // Move para o próximo campo, se houver
            const proximoInput = inputs[index + 1];
            if (proximoInput) {
              proximoInput.focus();
            } else {
              console.log('Último campo atingido!');
            }
          }
        });
      });
       
       
      // Faz a requisição após o carregamento do DOM
      fetch('/placa', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': "Bearer " + token
        }
      })
      .then(response => {
        console.log('Status da resposta:', response.status);
        if (!response.ok) {  // Se a resposta não for OK, rejeita com erro
          throw new Error('Erro na requisição com status: ' + response.status);
        }
        return response.json();
      })
      .then(data => {
        console.log('Resposta do servidor:', data);

        // Aqui é onde o nome será inserido na célula da tabela
        const nameElement = document.getElementById('a14');
        if (nameElement && data.user.name) {
          nameElement.textContent = data.user.name;  // Substitui o texto da célula com o valor de data.name
        } else {
          console.error("Elemento ou 'data.name' não encontrado.");
 
        }
      })
      .catch(error => {
       console.error('Erro na requisição:', error);
        alert("Erro: " + error.message);  // Exibe o erro no alert
 
      });
    });
  </script>


</div>
 
<script>
  async function enviarDados() {
    const loading = document.getElementById("contneinerLoading");

    const d = document.getElementById("inputDataValidade").value.trim();
    const n = document.getElementById("inputNumber").value.trim();

    console.log("Elemento Data:", d);
    console.log("Elemento Número:", n);

    // Validação antes de ativar o carregamento
    if (!n || !d) {
      alert("Verifique os dados informados");
      return;
    }

    loading.style.display = "flex"; // Exibe a animação de carregamento

    try {
      const token = localStorage.getItem("authToken");
      const response = await fetch("/placa/pesquisa", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + token,
        },
        body: JSON.stringify({ d, n }), // Envia os dados ao servidor
      });

      console.log("Status da resposta:", response.status);
      if (!response.ok) {
        throw new Error("Erro na requisição com status: " + response.status);
      }

      const data = await response.json();
      console.log("Resposta do servidor:", data);

      // Atualiza os elementos do DOM com os dados recebidos
      const updateElement = (id, value) => {
        const element = document.getElementById(id);
        if (element) element.innerText = value || "N/A";
      };

      if (data.user?.name) {
        updateElement("a14", data.user.name);
      }

      updateElement("a1", data.result.info);
      updateElement("a3", data.result.codint);
      updateElement("a5", data.result.ean);
      updateElement("a6", data.result.ean);
      updateElement("a8", data.result.dataRecebimento);
      updateElement("dataValidade", data.result.dataValidade);
      updateElement("a12", data.result.diasParaVencer);
      updateElement("b2", data.result.dia);
      updateElement("b3", data.result.ano);

      // Tratamento para limitar o conteúdo da div a 24 caracteres
      const a1 = document.getElementById("a1");
      let text = a1.innerText || a1.textContent;

      if (text.length > 24) {
        a1.innerText = text.substring(0, text.length > 30 ? 36 : 24) + "...";
        a1.style.fontSize = text.length > 30 ? "5em" : "inherit";
      }
    } catch (error) {
      console.error("Erro na requisição:", error);
      alert("Erro: " + error.message);
    } finally {
      loading.style.display = "none"; // Oculta o loading mesmo em caso de erro
    }
  }

 
   
</script>
 
